// <auto-generated />
// This file was generated by Shift.Ef code generator.

using Compile.Shift.Model;
using Microsoft.Extensions.Logging;
using System.Text;

namespace Compile.Shift.Ef;

public class EfCodeGenerator
{
    private readonly EntityGenerator _entityGenerator;
    private readonly DbContextGenerator _dbContextGenerator;
    private readonly EntityMapGenerator _entityMapGenerator;

    public required ILogger Logger { private get; init; }

    public EfCodeGenerator()
    {
        _entityGenerator = new EntityGenerator();
        _dbContextGenerator = new DbContextGenerator();
        _entityMapGenerator = new EntityMapGenerator();
    }

    public async Task GenerateEfCodeAsync(DatabaseModel model, string outputPath, string namespaceName = "Generated")
    {
        Logger.LogInformation("Starting Entity Framework code generation for {TableCount} tables", model.Tables.Count);

        // Ensure output directory exists
        Directory.CreateDirectory(outputPath);

        // Generate entity classes
        await GenerateEntitiesAsync(model, outputPath, namespaceName);

        // Generate entity maps
        await GenerateEntityMapsAsync(model, outputPath, namespaceName);

        // Generate DbContext
        await GenerateDbContextAsync(model, outputPath, namespaceName);

        Logger.LogInformation("Entity Framework code generation completed");
    }

    private async Task GenerateEntitiesAsync(DatabaseModel model, string outputPath, string namespaceName)
    {
        foreach (var table in model.Tables.Values)
        {
            var entityCode = _entityGenerator.GenerateEntity(table, namespaceName);
            var fileName = Path.Combine(outputPath, $"{table.Name}Entity.g.cs");
            await File.WriteAllTextAsync(fileName, entityCode);
            Logger.LogDebug("Generated entity class: {FileName}", fileName);
        }
    }

    private async Task GenerateEntityMapsAsync(DatabaseModel model, string outputPath, string namespaceName)
    {
        foreach (var table in model.Tables.Values)
        {
            var mapCode = _entityMapGenerator.GenerateEntityMap(table, namespaceName);
            var fileName = Path.Combine(outputPath, $"{table.Name}EntityMap.g.cs");
            await File.WriteAllTextAsync(fileName, mapCode);
            Logger.LogDebug("Generated entity map: {FileName}", fileName);
        }
    }

    private async Task GenerateDbContextAsync(DatabaseModel model, string outputPath, string namespaceName)
    {
        var contextCode = _dbContextGenerator.GenerateDbContext(model, namespaceName);
        var fileName = Path.Combine(outputPath, "GeneratedDbContext.g.cs");
        await File.WriteAllTextAsync(fileName, contextCode);
        Logger.LogDebug("Generated DbContext: {FileName}", fileName);
    }
}