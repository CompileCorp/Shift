using Compile.Shift.Model;
using System.Text;

namespace Compile.Shift.Ef;

public class EntityMapGenerator
{
    private readonly TypeMapper _typeMapper;

    public EntityMapGenerator()
    {
        _typeMapper = new TypeMapper();
    }

    public string GenerateEntityMap(TableModel table, string namespaceName)
    {
        var sb = new StringBuilder();

        // Header
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("// This file was generated by Shift.Ef code generator.");
        sb.AppendLine("// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
        sb.AppendLine();

        // Using statements
        sb.AppendLine("using Microsoft.EntityFrameworkCore;");
        sb.AppendLine("using Microsoft.EntityFrameworkCore.Metadata.Builders;");
        sb.AppendLine();

        // Namespace
        sb.AppendLine($"namespace {namespaceName};");
        sb.AppendLine();

        // Class declaration
        sb.AppendLine($"public partial class {table.Name}EntityMap : IEntityTypeConfiguration<{table.Name}Entity>");
        sb.AppendLine("{");
        sb.AppendLine($"    public void Configure(EntityTypeBuilder<{table.Name}Entity> builder)");
        sb.AppendLine("    {");

        // Table mapping
        sb.AppendLine($"        builder.ToTable(\"{table.Name}\");");
        sb.AppendLine();

        // Configure properties
        foreach (var field in table.Fields)
        {
            ConfigureProperty(sb, field);
        }

        // Configure foreign keys
        foreach (var fk in table.ForeignKeys)
        {
            ConfigureForeignKey(sb, fk, table.Name);
        }

        // Configure indexes
        foreach (var index in table.Indexes)
        {
            ConfigureIndex(sb, index);
        }

        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }

    private void ConfigureProperty(StringBuilder sb, FieldModel field)
    {
        // Start property configuration
        sb.Append($"        builder.Property(e => e.{field.Name})");
        sb.Append($"\n            .HasColumnName(\"{field.Name}\")");

        // Configure type and constraints
        if (!string.IsNullOrEmpty(field.Type))
        {
            var columnType = GetColumnTypeDefinition(field);
            if (!string.IsNullOrEmpty(columnType))
            {
                sb.Append($"\n            .HasColumnType(\"{columnType}\")");
            }
        }

        // Configure nullability
        if (!field.IsNullable && !field.IsOptional)
        {
            sb.Append("\n            .IsRequired()");
        }

        // End property configuration with semicolon
        sb.AppendLine(";");

        // Configure primary key
        if (field.IsPrimaryKey)
        {
            sb.AppendLine($"        builder.HasKey(e => e.{field.Name});");

            // Configure identity
            if (field.IsIdentity)
            {
                sb.AppendLine($"        builder.Property(e => e.{field.Name}).ValueGeneratedOnAdd();");
            }
        }

        sb.AppendLine();
    }

    private void ConfigureForeignKey(StringBuilder sb, ForeignKeyModel fk, string tableName)
    {
        sb.AppendLine($"        builder.HasOne(e => e.{fk.TargetTable})");
        sb.AppendLine($"            .WithMany()");
        sb.AppendLine($"            .HasForeignKey(e => e.{fk.ColumnName})");

        if (fk.IsNullable)
        {
            sb.AppendLine("            .IsRequired(false)");
        }
        else
        {
            sb.AppendLine("            .IsRequired()");
        }

        sb.AppendLine($"            .HasConstraintName(\"FK_{tableName}_{fk.TargetTable}_{fk.ColumnName}\");");
        sb.AppendLine();
    }

    private void ConfigureIndex(StringBuilder sb, IndexModel index)
    {
        if (index.Fields.Count == 1)
        {
            sb.AppendLine($"        builder.HasIndex(e => e.{index.Fields[0]})");
        }
        else if (index.Fields.Count > 1)
        {
            var fieldList = string.Join(", ", index.Fields.Select(f => $"e.{f}"));
            sb.AppendLine($"        builder.HasIndex(e => new {{ {fieldList} }})");
        }

        if (index.IsUnique)
        {
            sb.AppendLine("            .IsUnique()");
        }

        sb.AppendLine(";");
        sb.AppendLine();
    }

    private string GetColumnTypeDefinition(FieldModel field)
    {
        var type = field.Type.ToLower();

        return type switch
        {
            "decimal" or "numeric" when field.Precision.HasValue && field.Scale.HasValue =>
                $"decimal({field.Precision},{field.Scale})",
            "decimal" or "numeric" when field.Precision.HasValue =>
                $"decimal({field.Precision})",
            "varchar" or "nvarchar" or "char" or "nchar" when field.Precision.HasValue =>
                $"{field.Type}({field.Precision})",
            "varchar" or "nvarchar" when !field.Precision.HasValue =>
                $"{field.Type}(max)",
            _ => field.Type
        };
    }
}