using Compile.Shift.Model;
using System.Text;

namespace Compile.Shift.Ef;

public class DbContextGenerator
{
    public string GenerateDbContext(DatabaseModel model, EfCodeGenerationOptions options)
    {
        var sb = new StringBuilder();

        // Header
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("// This file was generated by Shift.Ef code generator.");
        sb.AppendLine("// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
        sb.AppendLine();

        // Using statements
        sb.AppendLine("using Microsoft.EntityFrameworkCore;");
        sb.AppendLine();

        // Namespace
        sb.AppendLine($"namespace {options.NamespaceName};");
        sb.AppendLine();

        // Class declaration with inheritance
        var baseClass = !string.IsNullOrEmpty(options.BaseClassName) ? options.BaseClassName : "DbContext";
        sb.AppendLine($"public partial class {options.ContextClassName} : {baseClass}, {options.InterfaceName}");
        sb.AppendLine("{");

        // Constructor
        sb.AppendLine($"    public {options.ContextClassName}()");
        sb.AppendLine("    {");
        sb.AppendLine("    }");
        sb.AppendLine();

        sb.AppendLine($"    public {options.ContextClassName}(DbContextOptions<{options.ContextClassName}> options)");
        sb.AppendLine("        : base(options)");
        sb.AppendLine("    {");
        sb.AppendLine("    }");
        sb.AppendLine();

        // DbSet properties
        foreach (var table in model.Tables.Values)
        {
            sb.AppendLine($"    public virtual DbSet<{table.Name}Entity> {table.Name} {{ get; set; }}");
        }
        sb.AppendLine();

        // OnModelCreating method
        sb.AppendLine("    protected override void OnModelCreating(ModelBuilder modelBuilder)");
        sb.AppendLine("    {");
        sb.AppendLine("        base.OnModelCreating(modelBuilder);");
        sb.AppendLine();

        // Apply entity configurations
        foreach (var table in model.Tables.Values)
        {
            sb.AppendLine($"        modelBuilder.ApplyConfiguration(new {table.Name}EntityMap());");
        }

        sb.AppendLine("    }");

        // OnConfiguring method (optional override)
        sb.AppendLine();
        sb.AppendLine("    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (!optionsBuilder.IsConfigured)");
        sb.AppendLine("        {");
        sb.AppendLine("            // Configure your database connection here if not configured elsewhere");
        sb.AppendLine("            // optionsBuilder.UseSqlServer(\"your_connection_string_here\");");
        sb.AppendLine("        }");
        sb.AppendLine("        base.OnConfiguring(optionsBuilder);");
        sb.AppendLine("    }");

        sb.AppendLine("}");

        return sb.ToString();
    }
}