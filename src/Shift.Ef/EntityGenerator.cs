// <auto-generated />
// This file was generated by Shift.Ef code generator.

using Compile.Shift.Model;
using System.Text;

namespace Compile.Shift.Ef;

public class EntityGenerator
{
    private readonly TypeMapper _typeMapper;

    public EntityGenerator()
    {
        _typeMapper = new TypeMapper();
    }

    public string GenerateEntity(TableModel table, string namespaceName)
    {
        var sb = new StringBuilder();

        // Header
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("// This file was generated by Shift.Ef code generator.");
        sb.AppendLine("// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
        sb.AppendLine();

        // Using statements
        sb.AppendLine("using System.ComponentModel.DataAnnotations;");
        sb.AppendLine("using System.ComponentModel.DataAnnotations.Schema;");
        sb.AppendLine();

        // Namespace
        sb.AppendLine($"namespace {namespaceName};");
        sb.AppendLine();

        // Class declaration
        sb.AppendLine($"[Table(\"{table.Name}\")]");
        sb.AppendLine($"public partial class {table.Name}Entity");
        sb.AppendLine("{");

        // Generate properties for fields
        foreach (var field in table.Fields)
        {
            GenerateProperty(sb, field);
        }

        // Generate navigation properties for foreign keys
        foreach (var fk in table.ForeignKeys)
        {
            GenerateNavigationProperty(sb, fk);
        }

        sb.AppendLine("}");

        return sb.ToString();
    }

    private void GenerateProperty(StringBuilder sb, FieldModel field)
    {
        var csharpType = _typeMapper.MapToCSharpType(field);
        var columnAttributes = new List<string>();

        // Add Column attribute if needed
        columnAttributes.Add($"[Column(\"{field.Name}\")]");

        // Add Key attribute for primary keys
        if (field.IsPrimaryKey)
        {
            columnAttributes.Add("[Key]");
        }

        // Add DatabaseGenerated attribute for identity columns
        if (field.IsIdentity)
        {
            columnAttributes.Add("[DatabaseGenerated(DatabaseGeneratedOption.Identity)]");
        }

        // Add Required attribute for non-nullable fields
        if (!field.IsNullable && !field.IsOptional && csharpType != "string")
        {
            columnAttributes.Add("[Required]");
        }

        // Add precision/scale attributes for decimal types
        if (field.Type.ToLower() == "decimal" && field.Precision.HasValue)
        {
            if (field.Scale.HasValue)
            {
                columnAttributes.Add($"[Column(TypeName = \"decimal({field.Precision},{field.Scale})\")]");
            }
            else
            {
                columnAttributes.Add($"[Column(TypeName = \"decimal({field.Precision})\")]");
            }
        }

        // Write attributes
        foreach (var attr in columnAttributes)
        {
            sb.AppendLine($"    {attr}");
        }

        // Write property
        sb.AppendLine($"    public {csharpType} {field.Name} {{ get; set; }}");
        sb.AppendLine();
    }

    private void GenerateNavigationProperty(StringBuilder sb, ForeignKeyModel fk)
    {
        var propertyName = fk.TargetTable;
        var propertyType = $"{fk.TargetTable}Entity";

        if (fk.IsNullable)
        {
            propertyType += "?";
        }

        sb.AppendLine($"    [ForeignKey(\"{fk.ColumnName}\")]");
        sb.AppendLine($"    public virtual {propertyType} {propertyName} {{ get; set; }}");
        sb.AppendLine();
    }
}